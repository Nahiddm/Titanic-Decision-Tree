# -*- coding: utf-8 -*-
"""Titanic Knowledge Sharing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18E0oPe_X3RoJhpPid_FnA2xe8i1JuccT

# Instalasi Dependensi
"""

import pandas as pd

"""# Data Understanding

## Dataset Titanic
"""

!gdown 1WFT7cZZPskeOC6JTqGq3x7ssf98HZiWM

dataset = pd.read_csv('titanic.csv')

def display_df(df):
      display(df.head())
      print(df.shape)

display_df(dataset)

dataset.info()

dataset.describe()

import seaborn as sns
import matplotlib.pyplot as plt

selected_columns = ['Pclass','Sex','SibSp','Parch', 'Embarked', 'Survived']

for column in selected_columns:
    plt.figure(figsize=(8, 5))
    sns.countplot(data=dataset, x=column, palette='Set2')
    plt.title(f'Bar Chart of {column}')
    plt.xlabel(column)
    plt.ylabel('Count')
    plt.show()

selected_columns = ['Age', 'Fare']

for column in selected_columns:
    plt.figure(figsize=(8, 5))
    sns.histplot(data=dataset, x=column, bins=30, kde=True, color='skyblue')
    plt.title(f'Histogram of {column}')
    plt.xlabel(column)
    plt.ylabel('Frequency')
    plt.show()

dataset.isna().sum()

duplicate_rows = dataset[dataset.duplicated()]
print('Jumlah data duplikat =', len(duplicate_rows))

import pandas as pd
import matplotlib.pyplot as plt

selected_columns = ['Pclass','SibSp','Parch', 'Survived','Age', 'Fare']
data_to_plot = dataset[selected_columns]

for column in data_to_plot.columns:
    plt.figure(figsize=(6, 4))
    sns.boxplot(data=data_to_plot[column], palette='Set2')
    plt.title(f'Boxplot of {column}')
    plt.show()

"""# Data Preparation

## Clean Data

### Handling nilai null
"""

# Impute Null Values
null_data_impute = ["Age","Fare"]

for column in null_data_impute:
  rata_rata = dataset[column].mean()
  dataset[column].fillna(rata_rata, inplace=True)

# Removing Null Values
null_data_remove = ["Embarked"]

for column in null_data_remove:
  dataset.dropna(subset=column, inplace=True)

dataset.isna().sum()

"""## Selecting Data"""

dropped_col = ["Ticket","Cabin"]
dataset = dataset.drop(columns=dropped_col)

dataset.info()

"""## Rekayasa Fitur Data (Feature Engineering)"""

# Membuat kolom baru FamilySize yang berisi mengenai jumlah keluarga
dataset['FamilySize'] = dataset['SibSp'] + dataset['Parch'] + 1

# Membuat kolom baru IsAlone untuk menentukan apakah penumpang tersebut sendirian atau tidak
dataset['IsAlone'] = 1
dataset['IsAlone'].loc[dataset['FamilySize'] > 1] = 0

# Membuat kolom baru Title untuk mengetahui gelar dari penumpang
dataset['Title'] = dataset['Name'].str.extract(' ([A-Za-z]+)\.', expand=False)
## Mengubah gelar yang memiliki jumlah sedikit
stat_min = 10
title_names = (dataset['Title'].value_counts() < stat_min)
dataset['Title'] = dataset['Title'].apply(lambda x: 'Misc' if title_names.loc[x] == True else x)

dataset.head()

new_order = ['PassengerId','Pclass','Name','Sex','Age','SibSp','Parch','Fare','Embarked','FamilySize','IsAlone','Title','Survived']
dataset = dataset.reindex(columns=new_order)

dataset.head()

"""## Formatting Data"""

from sklearn.preprocessing import LabelEncoder

label = LabelEncoder()

dataset['Sex'] = label.fit_transform(dataset['Sex'])
dataset['Embarked'] = label.fit_transform(dataset['Embarked'])
dataset['Title'] = label.fit_transform(dataset['Title'])

dataset.head()

dataset.info()

"""# Data Modelling

## Data Splitting
"""

from sklearn.metrics import confusion_matrix, accuracy_score, classification_report
from sklearn.model_selection import train_test_split
from sklearn import preprocessing

# Membagi variabel data menjadi variabel dependen dan independen
X = dataset.drop(['Survived', 'Name'], axis=1)
y = dataset['Survived']

# Merubah skala variabel bebas (variabel independen)
standardized_X = preprocessing.scale(X)

# Membagi data input menjadi data training dan data testing
X_train, X_test, y_train, y_test = train_test_split(standardized_X, y,test_size=0.2, random_state=42)

# Menampilkan ukuran setiap subset
print(f"Jumlah Data Training  : {X_train.shape[0]}")
print(f"Jumlah Data Testing   : {X_test.shape[0]}")

"""## Algoritma Decission Tree"""

import numpy as np
from sklearn.tree import DecisionTreeClassifier

# Gini Index digunakan sebagai Splitting Criterion
modelDT_gini = DecisionTreeClassifier(criterion="gini",
random_state=100, max_depth=3, min_samples_leaf=5)
modelDT_gini.fit(X_train, y_train)
y_pred = modelDT_gini.predict(X_test)

# Mengevaluasi Model Decission Tree
print("=== Evaluasi performa Decission Tree ===")
print("Accuracy                 : ", accuracy_score(y_test, y_pred)*100)
print("Confusion Matrix         :\n", confusion_matrix(y_test, y_pred))
print("Classification Report    : \n", classification_report(y_test, y_pred))

"""## Algoritma SVM"""

from sklearn.svm import SVC

# Mentraining Model SVM
SVMmodel = SVC(C=1.0, kernel='rbf').fit(X_train, y_train)
y_pred = SVMmodel.predict(X_test)
accuracy = accuracy_score(y_test, y_pred) * 100

# Mengevaluasi Model SVM
print("=== Evaluasi performa SVM ===")
print("Accuracy               : ", accuracy_score(y_test, y_pred) * 100)
print("Confusion Matrix       :\n", confusion_matrix(y_test, y_pred))
print("Classification Report  :\n", classification_report(y_test, y_pred))

"""# Visualisasi"""

from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt

# Membuat Pie Chart untuk memvisualisasikan akurasi
labels = ['Accuracy', 'Others']
sizes = [accuracy, 100 - accuracy]
explode = (0.1, 0)

plt.figure(figsize=(8, 6))
plt.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%', startangle=140)
plt.axis('equal')
plt.title('Akurasi Model SVM')
plt.show()

from sklearn.datasets import make_classification
from sklearn.svm import SVC
import matplotlib.pyplot as plt
import numpy as np

# Membuat grid untuk plotting batas keputusan
x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1
xx, yy = np.meshgrid(np.linspace(x_min, x_max, 100), np.linspace(y_min, y_max, 100))
Z = svm.predict(np.c_[xx.ravel(), yy.ravel()])
Z = Z.reshape(xx.shape)

# Plot batas keputusan
plt.contourf(xx, yy, Z, alpha=0.3)
plt.scatter(X[:, 0], X[:, 1], c=y, cmap='viridis', s=50, edgecolors='k')
plt.title('Batas Keputusan SVM')
plt.show()